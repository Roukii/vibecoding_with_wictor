// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { MoveEntity } from "./move_entity_reducer.ts";
export { MoveEntity };
import { SendMessage } from "./send_message_reducer.ts";
export { SendMessage };
import { SpawnPlayerEntity } from "./spawn_player_entity_reducer.ts";
export { SpawnPlayerEntity };
import { UpdatePlayerName } from "./update_player_name_reducer.ts";
export { UpdatePlayerName };

// Import and reexport all table handle types
import { EntityTableHandle } from "./entity_table.ts";
export { EntityTableHandle };
import { MessageTableHandle } from "./message_table.ts";
export { MessageTableHandle };
import { PlayerTableHandle } from "./player_table.ts";
export { PlayerTableHandle };

// Import and reexport all types
import { Entity } from "./entity_type.ts";
export { Entity };
import { Message } from "./message_type.ts";
export { Message };
import { Player } from "./player_type.ts";
export { Player };

const REMOTE_MODULE = {
  tables: {
    entity: {
      tableName: "entity",
      rowType: Entity.getTypeScriptAlgebraicType(),
    },
    message: {
      tableName: "message",
      rowType: Message.getTypeScriptAlgebraicType(),
    },
    player: {
      tableName: "player",
      rowType: Player.getTypeScriptAlgebraicType(),
    },
  },
  reducers: {
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    move_entity: {
      reducerName: "move_entity",
      argsType: MoveEntity.getTypeScriptAlgebraicType(),
    },
    send_message: {
      reducerName: "send_message",
      argsType: SendMessage.getTypeScriptAlgebraicType(),
    },
    spawn_player_entity: {
      reducerName: "spawn_player_entity",
      argsType: SpawnPlayerEntity.getTypeScriptAlgebraicType(),
    },
    update_player_name: {
      reducerName: "update_player_name",
      argsType: UpdatePlayerName.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "MoveEntity", args: MoveEntity }
| { name: "SendMessage", args: SendMessage }
| { name: "SpawnPlayerEntity", args: SpawnPlayerEntity }
| { name: "UpdatePlayerName", args: UpdatePlayerName }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  moveEntity(newX: number, newY: number) {
    const __args = { newX, newY };
    let __writer = new BinaryWriter(1024);
    MoveEntity.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_entity", __argsBuffer, this.setCallReducerFlags.moveEntityFlags);
  }

  onMoveEntity(callback: (ctx: ReducerEventContext, newX: number, newY: number) => void) {
    this.connection.onReducer("move_entity", callback);
  }

  removeOnMoveEntity(callback: (ctx: ReducerEventContext, newX: number, newY: number) => void) {
    this.connection.offReducer("move_entity", callback);
  }

  sendMessage(message: string) {
    const __args = { message };
    let __writer = new BinaryWriter(1024);
    SendMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("send_message", __argsBuffer, this.setCallReducerFlags.sendMessageFlags);
  }

  onSendMessage(callback: (ctx: ReducerEventContext, message: string) => void) {
    this.connection.onReducer("send_message", callback);
  }

  removeOnSendMessage(callback: (ctx: ReducerEventContext, message: string) => void) {
    this.connection.offReducer("send_message", callback);
  }

  spawnPlayerEntity(x: number, y: number) {
    const __args = { x, y };
    let __writer = new BinaryWriter(1024);
    SpawnPlayerEntity.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("spawn_player_entity", __argsBuffer, this.setCallReducerFlags.spawnPlayerEntityFlags);
  }

  onSpawnPlayerEntity(callback: (ctx: ReducerEventContext, x: number, y: number) => void) {
    this.connection.onReducer("spawn_player_entity", callback);
  }

  removeOnSpawnPlayerEntity(callback: (ctx: ReducerEventContext, x: number, y: number) => void) {
    this.connection.offReducer("spawn_player_entity", callback);
  }

  updatePlayerName(newName: string) {
    const __args = { newName };
    let __writer = new BinaryWriter(1024);
    UpdatePlayerName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_player_name", __argsBuffer, this.setCallReducerFlags.updatePlayerNameFlags);
  }

  onUpdatePlayerName(callback: (ctx: ReducerEventContext, newName: string) => void) {
    this.connection.onReducer("update_player_name", callback);
  }

  removeOnUpdatePlayerName(callback: (ctx: ReducerEventContext, newName: string) => void) {
    this.connection.offReducer("update_player_name", callback);
  }

}

export class SetReducerFlags {
  moveEntityFlags: CallReducerFlags = 'FullUpdate';
  moveEntity(flags: CallReducerFlags) {
    this.moveEntityFlags = flags;
  }

  sendMessageFlags: CallReducerFlags = 'FullUpdate';
  sendMessage(flags: CallReducerFlags) {
    this.sendMessageFlags = flags;
  }

  spawnPlayerEntityFlags: CallReducerFlags = 'FullUpdate';
  spawnPlayerEntity(flags: CallReducerFlags) {
    this.spawnPlayerEntityFlags = flags;
  }

  updatePlayerNameFlags: CallReducerFlags = 'FullUpdate';
  updatePlayerName(flags: CallReducerFlags) {
    this.updatePlayerNameFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get entity(): EntityTableHandle {
    return new EntityTableHandle(this.connection.clientCache.getOrCreateTable<Entity>(REMOTE_MODULE.tables.entity));
  }

  get message(): MessageTableHandle {
    return new MessageTableHandle(this.connection.clientCache.getOrCreateTable<Message>(REMOTE_MODULE.tables.message));
  }

  get player(): PlayerTableHandle {
    return new PlayerTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.player));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
